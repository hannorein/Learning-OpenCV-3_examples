// EXTRA Example 15-6, using OpenCV's background subtractor class.  Modified by Gary Bradski, 6/4/2017
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc.hpp"
#include "opencv2/videoio.hpp"
#include <opencv2/highgui.hpp>
#include <opencv2/video.hpp>

//C
#include <stdio.h>
//C++
#include <iostream>
#include <sstream>
using namespace cv;
using namespace std;
// Global variables
Mat frame; //current frame
Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method

Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor
int keyboard; //input from keyboard
void processVideo();

int main(int argc, char* argv[])
{
    //create GUI windows
    namedWindow("Frame");
    namedWindow("FG Mask MOG 2");

    //create Background Subtractor objects
    pMOG2 = createBackgroundSubtractorMOG2(); //MOG2 approach
    processVideo();
    //destroy GUI windows
    destroyAllWindows();
    return EXIT_SUCCESS;
}
void processVideo() {
    //create the capture object
    VideoCapture capture;
    capture.open(0);  
    capture.set(CV_CAP_PROP_FRAME_WIDTH,320);
    capture.set(CV_CAP_PROP_FRAME_HEIGHT,240);
    if(!capture.isOpened()){
        cerr << "Unable to open video stream." << endl;
        exit(EXIT_FAILURE);
    }
    
    double learning_rate = 0.01;
    while( (char)keyboard != 'q' && (char)keyboard != 27 ){
        //read the current frame
        if(!capture.read(frame)) {
            cerr << "Unable to read next frame." << endl;
            cerr << "Exiting..." << endl;
            exit(EXIT_FAILURE);
        }
        //update the background model
        //
        //NOTE: This file just demonstrates the generic methods, each class
        //      Has specific ways of setting thresholds etc to make it work well.
        //      You must go into the documentation (for MOG2, see classcv_1_1BackgroundSubtractorMOG2
        //      if you want to get good results!
        //
        pMOG2->apply(frame, fgMaskMOG2, learning_rate);
        //get the frame number and write it on the current frame
        //show the current frame and the fg masks
        imshow("Frame", frame);
        imshow("FG Mask MOG 2", fgMaskMOG2);
        
/* By uncommenting this, you can write out the mask images        
		string imageToSave = "output_MOG_" + frameNumberString + ".png";
		bool saved = imwrite(imageToSave, fgMaskMOG);
		if(!saved) {
		  cerr << "Unable to save " << imageToSave << endl;
		}        
*/
        //get the input from the keyboard
		keyboard = waitKey(1); //single step with keyboard press in run mode
    }
    //delete capture object
    capture.release();
}
